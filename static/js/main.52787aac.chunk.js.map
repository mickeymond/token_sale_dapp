{"version":3,"sources":["components/Header.js","components/Dapp.js","components/Spinner.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","Dapp","state","message","window","ethereum","on","accounts","location","reload","this","props","drizzle","contracts","DappToken","DappTokenSale","web3","account","drizzleState","methods","name","call","symbol","balanceOf","clientTokens","address","availableTokens","admin","tokenPrice","tokensSold","percentageSold","toFixed","priceInEther","utils","fromWei","setState","event","preventDefault","showLoader","tokens","buyTokens","send","value","toastr","error","hideLoader","endSale","_this2","onSubmit","bind","type","min","onChange","target","required","placeholder","showEndSaleBtn","onClick","_this$state2","showForm","style","width","Component","Spinner","role","Footer","_ref","accountBalance","accountBalances","App","loading","drizzle_react","Consumer","drizzleContext","initialized","marginTop","components_Dapp","Boolean","hostname","match","options","drizzleStore","generateStore","Drizzle","ReactDOM","render","Provider","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52787aac.chunk.js","sourcesContent":["import React from 'react';\n\nexport default () =>  {\n    return (\n        <div className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom shadow-sm fixed-top\">\n            <h5 className=\"my-0 mr-md-auto font-weight-normal\">The Future Company | TFC</h5>\n            <nav className=\"my-2 my-md-0 mr-md-3\">\n                {/* eslint-disable-next-line */}\n                <a className=\"p-2 text-dark\" href=\"\">Buy Tokens</a>\n                {/* eslint-disable-next-line */}\n                <a className=\"p-2 text-dark\" href=\"\">Transfer Tokens</a>\n                {/* eslint-disable-next-line */}\n                <a className=\"p-2 text-dark\" href=\"\">Approve Tokens</a>\n                {/* eslint-disable-next-line */}\n                <a className=\"p-2 text-dark\" href=\"\">Spend Tokens</a>\n            </nav>\n        </div>\n    );\n}","import React, { Component } from 'react';\nimport toastr from 'toastr/build/toastr.min.js';\n\nclass Dapp extends Component {\n\n    state = { message: '' };\n\n    async componentDidMount() {\n        window.ethereum.on('accountsChanged', function (accounts) {\n            window.location.reload();\n        });\n\n        const { DappToken, DappTokenSale } = this.props.drizzle.contracts;\n        const { web3 } = this.props.drizzle;\n\n        const account = this.props.drizzleState.accounts[0];\n\n        const name = await DappToken.methods.name().call();\n        const symbol = await DappToken.methods.symbol().call();\n        const clientTokens = await DappToken.methods.balanceOf(account).call();\n        const availableTokens = await DappToken.methods.balanceOf(DappTokenSale.address).call();\n\n        const admin = await DappTokenSale.methods.admin().call();\n        const tokenPrice = await DappTokenSale.methods.tokenPrice().call();\n        const tokensSold = await DappTokenSale.methods.tokensSold().call();\n\n        const percentageSold = ((tokensSold / 750000) * 100).toFixed(2);\n        const priceInEther = web3.utils.fromWei(tokenPrice);\n\n        // Set keys on state\n        this.setState({\n            name, symbol, admin, tokenPrice, clientTokens, tokensSold, availableTokens, percentageSold,\n            priceInEther\n        });\n    }\n\n    async buyTokens(event) {\n        event.preventDefault();\n        this.props.showLoader();\n        const { DappTokenSale } = this.props.drizzle.contracts;\n        const { tokens, tokenPrice } = this.state;\n        \n        try {\n            await DappTokenSale.methods.buyTokens(tokens).send({\n                value: tokenPrice * tokens\n            });\n\n            window.location.reload();\n        } catch ({ message }) {\n            this.setState({ message });\n            toastr.error(message);\n            this.props.hideLoader();\n        }\n    }\n\n    async endSale(event) {\n        event.preventDefault();\n        this.props.showLoader();\n        const { DappTokenSale } = this.props.drizzle.contracts;\n\n        try {\n            await DappTokenSale.methods.endSale().send();\n\n            window.location.reload();\n        } catch ({ message }) {\n            this.setState({ message });\n            toastr.error(message);\n            this.props.hideLoader();\n        }\n    }\n\n    showForm() {\n        if(this.state.availableTokens > 0) {\n            return (\n                <form className=\"mt-5\" onSubmit={this.buyTokens.bind(this)}>\n                    <div className=\"input-group\">\n                        <input\n                            type=\"number\"\n                            min=\"1\"\n                            onChange={(event) => this.setState({ tokens: event.target.value })}\n                            required\n                            className=\"form-control\"\n                            placeholder=\"Number of tokens\"\n                        />\n                        <div className=\"input-group-append\">\n                            <button className=\"btn btn-primary\" type=\"submit\">Buy Tokens</button>\n                        </div>\n                    </div>\n                </form>\n            );\n        }\n\n        return this.showEndSaleBtn();\n    }\n\n    showEndSaleBtn() {\n        if(this.state.admin === this.state.account) {\n            return <button onClick={this.endSale.bind(this)} className=\"btn btn-success\">End Sale</button>;\n        }\n    }\n    \n    render() {\n        const {\n            name, symbol, priceInEther, clientTokens, availableTokens, admin, percentageSold, tokensSold\n        } = this.state;\n        return (\n            <div>\n                <h1 className=\"mb-5\"><strong>{symbol} TOKEN ICO SALE</strong></h1>\n                <p>Introducing {name} {symbol}! 1 Token cost {priceInEther} ETH. You currently have <strong>{clientTokens}</strong> {symbol}.</p>\n                <p>There are <strong>{availableTokens}</strong> {symbol} tokens available.</p>\n                <p>ICO is managed by <strong>{admin}</strong></p>\n                {this.showForm()}\n                <div className=\"progress mt-4\">\n                    <div className=\"progress-bar bg-info\" style={{ width: percentageSold+\"%\" }}>\n                        {percentageSold}%\n                    </div>\n                </div>\n                <p className=\"mt-3\">{tokensSold} / 750000 tokens sold.</p>\n            </div>\n        );\n    }\n}\n\nexport default Dapp;\n","import React from 'react';\n\nexport default () => {\n    return (\n        <div className=\"text-center\">\n          <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n    );\n}\n","import React from 'react';\n\nexport default ({ drizzle, drizzleState }) => {\n    const { web3 } = drizzle;\n\n    const account = drizzleState.accounts[0];\n    const accountBalance = web3.utils.fromWei(drizzleState.accountBalances[account]);\n    return (\n        <footer className=\"footer bg-dark mt-auto pt-3 fixed-bottom\">\n            <div className=\"container\">\n                <p className=\"text-center text-white\">Your account is: <strong>{account}</strong> with <strong>{accountBalance}</strong> ETH</p>\n            </div>\n        </footer>\n    );\n}\n","import React, { Component } from 'react';\nimport { DrizzleContext } from 'drizzle-react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'toastr/build/toastr.min.css'\n\nimport Header from './components/Header';\nimport Dapp from './components/Dapp';\nimport Spinner from './components/Spinner';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n\n  state = { loading: false };\n\n  showLoader() {\n    this.setState({ loading: true });\n  }\n\n  hideLoader() {\n    this.setState({ loading: false });\n  }\n\n  render() {\n    return (\n      <DrizzleContext.Consumer>\n        {drizzleContext => {\n          const { drizzle, drizzleState, initialized } = drizzleContext;\n      \n          if (!initialized || this.state.loading) {\n            return (\n              <div className=\"container text-center mt-5\">\n                <Spinner />\n              </div>\n            );\n          }\n    \n          return (\n            <div>\n              <Header />\n              <div\n                className=\"container text-center\"\n                style={{ marginTop: \"150px\" }}\n              >\n                <Dapp\n                  drizzle={drizzle}\n                  drizzleState={drizzleState}\n                  showLoader={this.showLoader.bind(this)}\n                  hideLoader={this.hideLoader.bind(this)}\n                />\n              </div>\n              <Footer\n                drizzle={drizzle}\n                drizzleState={drizzleState}\n              />\n            </div>\n          );\n        }}\n      </DrizzleContext.Consumer>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Drizzle, generateStore } from \"drizzle\";\nimport { DrizzleContext } from 'drizzle-react';\n\nimport DappToken from './contracts/DappToken.json';\nimport DappTokenSale from './contracts/DappTokenSale.json'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst options = {\n    contracts: [\n        DappToken,\n        DappTokenSale\n    ]\n}\n\nconst drizzleStore = generateStore(options);\nconst drizzle = new Drizzle(options, drizzleStore);\n\nReactDOM.render(\n    <DrizzleContext.Provider drizzle={drizzle}>\n        <App />\n    </DrizzleContext.Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}