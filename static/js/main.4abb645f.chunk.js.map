{"version":3,"sources":["components/TokenSale.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["TokenSale","state","message","tokens","window","ethereum","on","accounts","location","reload","this","props","drizzle","contracts","DappToken","DappTokenSale","web3","account","drizzleState","eth","getBalance","accountBalance","accountBalanceInEther","utils","fromWei","methods","name","call","symbol","balanceOf","clientTokens","address","availableTokens","admin","tokenPrice","tokensSold","totalTokens","Number","percentageSold","toFixed","priceInEther","setState","event","preventDefault","showLoader","buyTokens","send","value","toastr","error","hideLoader","endSale","_this2","react_default","a","createElement","Container","Segment","Input","placeholder","type","min","onChange","e","data","Button","disabled","primary","onClick","bind","showEndSaleBtn","positive","_this$state2","textAlign","Header","as","Divider","Message","raised","showForm","Progress","percent","progress","active","indicating","className","color","Component","Spinner","Loader","inline","size","App","loading","drizzle_react","Consumer","drizzleContext","initialized","components_TokenSale","Boolean","hostname","match","options","drizzleStore","generateStore","Drizzle","ReactDOM","render","Provider","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4abb645f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Divider, Container, Button, Header, Segment, Message , Input, Progress } from 'semantic-ui-react';\nimport toastr from 'toastr/build/toastr.min.js';\n\nclass TokenSale extends Component {\n\n    state = { message: '', tokens: '' };\n\n    async componentDidMount() {\n        if(window.ethereum) {\n            window.ethereum.on('accountsChanged', function (accounts) {\n                window.location.reload();\n            });\n        }\n\n        const { DappToken, DappTokenSale } = this.props.drizzle.contracts;\n        const { web3 } = this.props.drizzle;\n\n        const account = this.props.drizzleState.accounts[0];\n        const accountBalance = await web3.eth.getBalance(account);\n        const accountBalanceInEther = web3.utils.fromWei(accountBalance);\n\n        const name = await DappToken.methods.name().call();\n        const symbol = await DappToken.methods.symbol().call();\n        const clientTokens = await DappToken.methods.balanceOf(account).call();\n        const availableTokens = await DappToken.methods.balanceOf(DappTokenSale.address).call();\n\n        const admin = await DappTokenSale.methods.admin().call();\n        const tokenPrice = await DappTokenSale.methods.tokenPrice().call();\n        const tokensSold = await DappTokenSale.methods.tokensSold().call();\n\n        const totalTokens = Number(availableTokens) + Number(tokensSold);\n\n        const percentageSold = ((tokensSold / totalTokens) * 100).toFixed(2);\n        const priceInEther = web3.utils.fromWei(tokenPrice);\n\n        // Set keys on state\n        this.setState({\n            name, symbol, admin, tokenPrice, clientTokens, tokensSold, availableTokens, percentageSold,\n            priceInEther, totalTokens, account, accountBalanceInEther\n        });\n    }\n\n    async buyTokens(event) {\n        event.preventDefault();\n        this.props.showLoader();\n        const { DappTokenSale } = this.props.drizzle.contracts;\n        const { tokens, tokenPrice } = this.state;\n        \n        try {\n            await DappTokenSale.methods.buyTokens(tokens).send({ value: tokenPrice * tokens });\n\n            window.location.reload();\n        } catch ({ message }) {\n            toastr.error(message);\n            this.props.hideLoader();\n        }\n    }\n\n    async endSale(event) {\n        event.preventDefault();\n        this.props.showLoader();\n        const { DappTokenSale } = this.props.drizzle.contracts;\n\n        try {\n            await DappTokenSale.methods.endSale().send();\n\n            window.location.reload();\n        } catch ({ message }) {\n            toastr.error(message);\n            this.props.hideLoader();\n        }\n    }\n\n    showForm() {\n        if(this.state.availableTokens > 0) {\n            return (\n                <Container>\n                    <Segment>\n                        <Input\n                            placeholder=\"Number of tokens\"\n                            type=\"number\"\n                            min=\"1\"\n                            onChange={(e, data) => this.setState({ tokens: data.value })}\n                        />\n                    </Segment>\n                    <Button\n                        disabled={this.state.tokens >= 1 ? false : true}\n                        primary\n                        onClick={this.buyTokens.bind(this)}\n                    >\n                        Buy Tokens\n                    </Button>\n                </Container>\n            );\n        }\n\n        return this.showEndSaleBtn();\n    }\n\n    showEndSaleBtn() {\n        if(this.state.admin === this.state.account) {\n            return <Button onClick={this.endSale.bind(this)} positive>End Sale</Button>;\n        }\n    }\n    \n    render() {\n        const {\n            name, symbol, priceInEther, clientTokens, availableTokens, admin, percentageSold, tokensSold, totalTokens,\n            account, accountBalanceInEther\n        } = this.state;\n        return (\n            <Container textAlign=\"center\">\n                <Segment>\n                    <Header as=\"h1\">The Future Company | TFC</Header>\n                </Segment>\n                <Divider />\n                <Message>\n                    <Message.Header>{symbol} TOKEN ICO SALE</Message.Header>\n                    <p>There are <strong>{availableTokens}</strong> {symbol} tokens available.</p>\n                </Message>\n                <Divider />\n                <Message>\n                    <Message.Header>ICO MANAGER</Message.Header>\n                    <p>ICO is managed by <strong>{admin}</strong></p>\n                </Message>\n                <Divider />\n                <Segment raised>\n                    <p>Introducing {name} {symbol}! 1 Token cost {priceInEther} ETH. You currently have <strong>{clientTokens}</strong> {symbol}.</p>\n                </Segment>\n                <Divider />\n                <Segment raised>\n                    {this.showForm()}\n                </Segment>\n                <Divider />\n                <Segment raised>\n                    <Progress percent={percentageSold} progress active indicating>\n                        <p className=\"mt-3\">{tokensSold} / {totalTokens} tokens sold.</p>\n                    </Progress>\n                </Segment>\n                <Message color=\"orange\">\n                    <p>This token sale uses the Ropsten Test Network with fake ether. Use a browser extension like Metamask to connect to the test network and participate in the ICO. Please be patient if the test network runs slowly.</p>\n                </Message>\n                <Segment raised>\n                    <p className=\"text-center text-white\">Your account is: <strong>{account}</strong> with <strong>{accountBalanceInEther}</strong> ETH</p>\n                </Segment>\n            </Container>\n        );\n    }\n}\n\nexport default TokenSale;\n","import React from 'react';\nimport { Loader } from 'semantic-ui-react';\n\nexport default () => {\n    return (\n        <Loader\n            active\n            inline=\"centered\"\n            size=\"massive\"\n        />\n    );\n}","import React, { Component } from 'react';\nimport { DrizzleContext } from 'drizzle-react';\nimport 'semantic-ui-css/semantic.min.css'\nimport 'toastr/build/toastr.min.css'\n\nimport TokenSale from './components/TokenSale';\nimport Spinner from './components/Spinner';\n\nclass App extends Component {\n\n  state = { loading: false };\n\n  showLoader() {\n    this.setState({ loading: true });\n  }\n\n  hideLoader() {\n    this.setState({ loading: false });\n  }\n\n  render() {\n    return (\n      <DrizzleContext.Consumer>\n        {drizzleContext => {\n          const { drizzle, drizzleState, initialized } = drizzleContext;\n      \n          if (!initialized || this.state.loading) {\n            return (\n              <div className=\"container text-center mt-5\">\n                <Spinner />\n              </div>\n            );\n          }\n    \n          return (\n            <TokenSale\n              drizzle={drizzle}\n              drizzleState={drizzleState}\n              showLoader={this.showLoader.bind(this)}\n              hideLoader={this.hideLoader.bind(this)}\n            />\n          );\n        }}\n      </DrizzleContext.Consumer>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Drizzle, generateStore } from \"drizzle\";\nimport { DrizzleContext } from 'drizzle-react';\n\nimport DappToken from './contracts/DappToken.json';\nimport DappTokenSale from './contracts/DappTokenSale.json'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst options = {\n    contracts: [\n        DappToken,\n        DappTokenSale\n    ]\n}\n\nconst drizzleStore = generateStore(options);\nconst drizzle = new Drizzle(options, drizzleStore);\n\nReactDOM.render(\n    <DrizzleContext.Provider drizzle={drizzle}>\n        <App />\n    </DrizzleContext.Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}