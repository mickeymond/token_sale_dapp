{"version":3,"sources":["components/Header.js","components/Dapp.js","components/Spinner.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Dapp","state","message","window","ethereum","on","accounts","location","reload","this","props","drizzle","contracts","DappToken","DappTokenSale","web3","account","drizzleState","methods","name","call","symbol","balanceOf","clientTokens","address","availableTokens","admin","tokenPrice","tokensSold","totalTokens","Number","percentageSold","toFixed","priceInEther","utils","fromWei","setState","event","preventDefault","showLoader","tokens","buyTokens","send","value","toastr","error","hideLoader","endSale","_this2","onSubmit","bind","type","min","onChange","target","required","placeholder","showEndSaleBtn","onClick","_this$state2","style","marginBottom","showForm","width","role","Component","Spinner","Footer","_ref","accountBalance","accountBalances","App","loading","drizzle_react","Consumer","drizzleContext","initialized","components_Dapp","Boolean","hostname","match","options","drizzleStore","generateStore","Drizzle","ReactDOM","render","Provider","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6ipJAEeA,iBAAA,WACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uGACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sCAAd,0EC6HGC,6MA7HXC,MAAQ,CAAEC,QAAS,wOAGZC,OAAOC,UACND,OAAOC,SAASC,GAAG,kBAAmB,SAAUC,GAC5CH,OAAOI,SAASC,aAIaC,KAAKC,MAAMC,QAAQC,UAAhDC,cAAWC,kBACXC,EAASN,KAAKC,MAAMC,QAApBI,KAEFC,EAAUP,KAAKC,MAAMO,aAAaX,SAAS,YAE9BO,EAAUK,QAAQC,OAAOC,qBAAtCD,kBACeN,EAAUK,QAAQG,SAASD,qBAA1CC,mBACqBR,EAAUK,QAAQI,UAAUN,GAASI,sBAA1DG,mBACwBV,EAAUK,QAAQI,UAAUR,EAAcU,SAASJ,sBAA3EK,mBAEcX,EAAcI,QAAQQ,QAAQN,sBAA5CM,mBACmBZ,EAAcI,QAAQS,aAAaP,sBAAtDO,mBACmBb,EAAcI,QAAQU,aAAaR,eAAtDQ,SAEAC,EAAcC,OAAOL,GAAmBK,OAAOF,GAE/CG,GAAmBH,EAAaC,EAAe,KAAKG,QAAQ,GAC5DC,EAAelB,EAAKmB,MAAMC,QAAQR,GAGxClB,KAAK2B,SAAS,CACVjB,OAAME,SAAQK,QAAOC,aAAYJ,eAAcK,aAAYH,kBAAiBM,iBAC5EE,eAAcJ,6LAINQ,wFACZA,EAAMC,iBACN7B,KAAKC,MAAM6B,aACHzB,EAAkBL,KAAKC,MAAMC,QAAQC,UAArCE,gBACuBL,KAAKR,MAA5BuC,WAAQb,iCAGNb,EAAcI,QAAQuB,UAAUD,GAAQE,KAAK,CAC/CC,MAAOhB,EAAaa,WAGxBrC,OAAOI,SAASC,2DACTN,eACPO,KAAK2B,SAAS,CAAElC,YAChB0C,IAAOC,MAAM3C,GACbO,KAAKC,MAAMoC,kMAILT,kFACVA,EAAMC,iBACN7B,KAAKC,MAAM6B,aACHzB,EAAkBL,KAAKC,MAAMC,QAAQC,UAArCE,gCAGEA,EAAcI,QAAQ6B,UAAUL,cAEtCvC,OAAOI,SAASC,yDACTN,eACPO,KAAK2B,SAAS,CAAElC,YAChB0C,IAAOC,MAAM3C,GACbO,KAAKC,MAAMoC,4JAIR,IAAAE,EAAAvC,KACP,OAAGA,KAAKR,MAAMwB,gBAAkB,EAExB7B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAOkD,SAAUxC,KAAKgC,UAAUS,KAAKzC,OACjDb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,SACIqD,KAAK,SACLC,IAAI,IACJC,SAAU,SAAChB,GAAD,OAAWW,EAAKZ,SAAS,CAAEI,OAAQH,EAAMiB,OAAOX,SAC1DY,UAAQ,EACRxD,UAAU,eACVyD,YAAY,qBAEhB5D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBoD,KAAK,UAAzC,iBAOb1C,KAAKgD,0DAIZ,GAAGhD,KAAKR,MAAMyB,QAAUjB,KAAKR,MAAMe,QAC/B,OAAOpB,EAAAC,EAAAC,cAAA,UAAQ4D,QAASjD,KAAKsC,QAAQG,KAAKzC,MAAOV,UAAU,mBAApD,6CAIN,IAAA4D,EAGDlD,KAAKR,MADLkB,EAFCwC,EAEDxC,KAAME,EAFLsC,EAEKtC,OAAQY,EAFb0B,EAEa1B,aAAcV,EAF3BoC,EAE2BpC,aAAcE,EAFzCkC,EAEyClC,gBAAiBC,EAF1DiC,EAE0DjC,MAAOK,EAFjE4B,EAEiE5B,eAAgBH,EAFjF+B,EAEiF/B,WAAYC,EAF7F8B,EAE6F9B,YAElG,OACIjC,EAAAC,EAAAC,cAAA,OAAK8D,MAAO,CAAEC,aAAc,UACxBjE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAOH,EAAAC,EAAAC,cAAA,cAASuB,EAAT,oBACrBzB,EAAAC,EAAAC,cAAA,wBAAgBqB,EAAhB,IAAuBE,EAAvB,kBAA8CY,EAA9C,4BAAoFrC,EAAAC,EAAAC,cAAA,cAASyB,GAA7F,IAAqHF,EAArH,KACAzB,EAAAC,EAAAC,cAAA,sBAAaF,EAAAC,EAAAC,cAAA,cAAS2B,GAAtB,IAAiDJ,EAAjD,sBACAzB,EAAAC,EAAAC,cAAA,8BAAqBF,EAAAC,EAAAC,cAAA,cAAS4B,IAC7BjB,KAAKqD,WACNlE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBAAuB6D,MAAO,CAAEG,MAAOhC,EAAe,MAChEA,EADL,MAIJnC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQ6B,EAArB,MAAoCC,EAApC,iBACAjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBiE,KAAK,SAA1C,8NAvHGC,aCDJC,EAAA,WACX,OACItE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBiE,KAAK,UACnCpE,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,iBCJGoE,EAAA,SAAAC,GAA+B,IAA5BzD,EAA4ByD,EAA5BzD,QAASM,EAAmBmD,EAAnBnD,aACfF,EAASJ,EAATI,KAEFC,EAAUC,EAAaX,SAAS,GAChC+D,EAAiBtD,EAAKmB,MAAMC,QAAQlB,EAAaqD,gBAAgBtD,IACvE,OACIpB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,yCACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0BAAb,oBAAuDH,EAAAC,EAAAC,cAAA,cAASkB,GAAhE,SAAuFpB,EAAAC,EAAAC,cAAA,cAASuE,GAAhG,WCmDDE,6MAjDbtE,MAAQ,CAAEuE,SAAS,+EAGjB/D,KAAK2B,SAAS,CAAEoC,SAAS,yCAIzB/D,KAAK2B,SAAS,CAAEoC,SAAS,qCAGlB,IAAAxB,EAAAvC,KACP,OACEb,EAAAC,EAAAC,cAAC2E,EAAA,eAAeC,SAAhB,KACG,SAAAC,GAAkB,IACThE,EAAuCgE,EAAvChE,QAASM,EAA8B0D,EAA9B1D,aAEjB,OAF+C0D,EAAhBC,aAEX5B,EAAK/C,MAAMuE,QAE3B5E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAACoE,EAAD,OAMJtE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACH,EAAD,MACAC,EAAAC,EAAAC,cAAA,OACEC,UAAU,yBAEVH,EAAAC,EAAAC,cAAC+E,EAAD,CACElE,QAASA,EACTM,aAAcA,EACdsB,WAAYS,EAAKT,WAAWW,KAAKF,GACjCF,WAAYE,EAAKF,WAAWI,KAAKF,MAGrCpD,EAAAC,EAAAC,cAACqE,EAAD,CACExD,QAASA,EACTM,aAAcA,cAzCZgD,aCEEa,QACW,cAA7B3E,OAAOI,SAASwE,UAEe,UAA7B5E,OAAOI,SAASwE,UAEhB5E,OAAOI,SAASwE,SAASC,MACvB,2DCPN,IAAMC,EAAU,CACZrE,UAAW,CACPC,EACAC,IAIFoE,EAAeC,wBAAcF,GAC7BtE,EAAU,IAAIyE,UAAQH,EAASC,GAErCG,IAASC,OACL1F,EAAAC,EAAAC,cAAC2E,EAAA,eAAec,SAAhB,CAAyB5E,QAASA,GAC9Bf,EAAAC,EAAAC,cAAC0F,EAAD,OAEJC,SAASC,eAAe,SDwGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dad16e99.chunk.js","sourcesContent":["import React from 'react';\n\nexport default () =>  {\n    return (\n        <div className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom shadow-sm\">\n            <h5 className=\"my-0 mr-md-auto font-weight-normal\">The Future Company | TFC</h5>\n        </div>\n    );\n}","import React, { Component } from 'react';\nimport toastr from 'toastr/build/toastr.min.js';\n\nclass Dapp extends Component {\n\n    state = { message: '' };\n\n    async componentDidMount() {\n        if(window.ethereum) {\n            window.ethereum.on('accountsChanged', function (accounts) {\n                window.location.reload();\n            });\n        }\n\n        const { DappToken, DappTokenSale } = this.props.drizzle.contracts;\n        const { web3 } = this.props.drizzle;\n\n        const account = this.props.drizzleState.accounts[0];\n\n        const name = await DappToken.methods.name().call();\n        const symbol = await DappToken.methods.symbol().call();\n        const clientTokens = await DappToken.methods.balanceOf(account).call();\n        const availableTokens = await DappToken.methods.balanceOf(DappTokenSale.address).call();\n\n        const admin = await DappTokenSale.methods.admin().call();\n        const tokenPrice = await DappTokenSale.methods.tokenPrice().call();\n        const tokensSold = await DappTokenSale.methods.tokensSold().call();\n\n        const totalTokens = Number(availableTokens) + Number(tokensSold);\n\n        const percentageSold = ((tokensSold / totalTokens) * 100).toFixed(2);\n        const priceInEther = web3.utils.fromWei(tokenPrice);\n\n        // Set keys on state\n        this.setState({\n            name, symbol, admin, tokenPrice, clientTokens, tokensSold, availableTokens, percentageSold,\n            priceInEther, totalTokens\n        });\n    }\n\n    async buyTokens(event) {\n        event.preventDefault();\n        this.props.showLoader();\n        const { DappTokenSale } = this.props.drizzle.contracts;\n        const { tokens, tokenPrice } = this.state;\n        \n        try {\n            await DappTokenSale.methods.buyTokens(tokens).send({\n                value: tokenPrice * tokens\n            });\n\n            window.location.reload();\n        } catch ({ message }) {\n            this.setState({ message });\n            toastr.error(message);\n            this.props.hideLoader();\n        }\n    }\n\n    async endSale(event) {\n        event.preventDefault();\n        this.props.showLoader();\n        const { DappTokenSale } = this.props.drizzle.contracts;\n\n        try {\n            await DappTokenSale.methods.endSale().send();\n\n            window.location.reload();\n        } catch ({ message }) {\n            this.setState({ message });\n            toastr.error(message);\n            this.props.hideLoader();\n        }\n    }\n\n    showForm() {\n        if(this.state.availableTokens > 0) {\n            return (\n                <form className=\"mt-5\" onSubmit={this.buyTokens.bind(this)}>\n                    <div className=\"input-group\">\n                        <input\n                            type=\"number\"\n                            min=\"1\"\n                            onChange={(event) => this.setState({ tokens: event.target.value })}\n                            required\n                            className=\"form-control\"\n                            placeholder=\"Number of tokens\"\n                        />\n                        <div className=\"input-group-append\">\n                            <button className=\"btn btn-primary\" type=\"submit\">Buy Tokens</button>\n                        </div>\n                    </div>\n                </form>\n            );\n        }\n\n        return this.showEndSaleBtn();\n    }\n\n    showEndSaleBtn() {\n        if(this.state.admin === this.state.account) {\n            return <button onClick={this.endSale.bind(this)} className=\"btn btn-success\">End Sale</button>;\n        }\n    }\n    \n    render() {\n        const {\n            name, symbol, priceInEther, clientTokens, availableTokens, admin, percentageSold, tokensSold, totalTokens\n        } = this.state;\n        return (\n            <div style={{ marginBottom: '120px' }}>\n                <h1 className=\"mb-5\"><strong>{symbol} TOKEN ICO SALE</strong></h1>\n                <p>Introducing {name} {symbol}! 1 Token cost {priceInEther} ETH. You currently have <strong>{clientTokens}</strong> {symbol}.</p>\n                <p>There are <strong>{availableTokens}</strong> {symbol} tokens available.</p>\n                <p>ICO is managed by <strong>{admin}</strong></p>\n                {this.showForm()}\n                <div className=\"progress mt-4\">\n                    <div className=\"progress-bar bg-info\" style={{ width: percentageSold+\"%\" }}>\n                        {percentageSold}%\n                    </div>\n                </div>\n                <p className=\"mt-3\">{tokensSold} / {totalTokens} tokens sold.</p>\n                <div className=\"alert alert-primary\" role=\"alert\">\n                    This token sale uses the Ropsten Test Network with fake ether. Use a browser extension like Metamask to connect to the test network and participate in the ICO. Please be patient if the test network runs slowly.\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Dapp;\n","import React from 'react';\n\nexport default () => {\n    return (\n        <div className=\"text-center\">\n          <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n    );\n}\n","import React from 'react';\n\nexport default ({ drizzle, drizzleState }) => {\n    const { web3 } = drizzle;\n\n    const account = drizzleState.accounts[0];\n    const accountBalance = web3.utils.fromWei(drizzleState.accountBalances[account]);\n    return (\n        <footer className=\"footer bg-dark mt-5 pt-3 fixed-bottom\">\n            <div className=\"container\">\n                <p className=\"text-center text-white\">Your account is: <strong>{account}</strong> with <strong>{accountBalance}</strong> ETH</p>\n            </div>\n        </footer>\n    );\n}\n","import React, { Component } from 'react';\nimport { DrizzleContext } from 'drizzle-react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'toastr/build/toastr.min.css'\n\nimport Header from './components/Header';\nimport Dapp from './components/Dapp';\nimport Spinner from './components/Spinner';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n\n  state = { loading: false };\n\n  showLoader() {\n    this.setState({ loading: true });\n  }\n\n  hideLoader() {\n    this.setState({ loading: false });\n  }\n\n  render() {\n    return (\n      <DrizzleContext.Consumer>\n        {drizzleContext => {\n          const { drizzle, drizzleState, initialized } = drizzleContext;\n      \n          if (!initialized || this.state.loading) {\n            return (\n              <div className=\"container text-center mt-5\">\n                <Spinner />\n              </div>\n            );\n          }\n    \n          return (\n            <div>\n              <Header />\n              <div\n                className=\"container text-center\"\n              >\n                <Dapp\n                  drizzle={drizzle}\n                  drizzleState={drizzleState}\n                  showLoader={this.showLoader.bind(this)}\n                  hideLoader={this.hideLoader.bind(this)}\n                />\n              </div>\n              <Footer\n                drizzle={drizzle}\n                drizzleState={drizzleState}\n              />\n            </div>\n          );\n        }}\n      </DrizzleContext.Consumer>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Drizzle, generateStore } from \"drizzle\";\nimport { DrizzleContext } from 'drizzle-react';\n\nimport DappToken from './contracts/DappToken.json';\nimport DappTokenSale from './contracts/DappTokenSale.json'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst options = {\n    contracts: [\n        DappToken,\n        DappTokenSale\n    ]\n}\n\nconst drizzleStore = generateStore(options);\nconst drizzle = new Drizzle(options, drizzleStore);\n\nReactDOM.render(\n    <DrizzleContext.Provider drizzle={drizzle}>\n        <App />\n    </DrizzleContext.Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}